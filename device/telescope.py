
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# telescope.py - Alpaca API responders for Telescope
#
# Author:   Kai Yung <kaicyung@gmail.com> (kcy)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# 02-Mar-2024   kcy Initial edit

from falcon import Request, Response, HTTPBadRequest, HTTPTemporaryRedirect, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                get_request_field, to_bool
from exceptions import *        # Nothing but exception classes
from dwarf_device import Dwarf
from alpaca.telescope import *
import json

logger: Logger = None

# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 10                     # Single instance

# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class TelescopeMetadata:
    """ Metadata describing the Telescope Device. Edit for your device"""
    Name = 'Dwarflab DWARF II Smart Telescope'
    Version = '1.0a1'
    Description = 'Alpaca Driver for DWARFII Smart Telescope'
    DeviceType = 'Telescope'
    DeviceID = '844fdb02-4bc3-42ea-a4b7-66e1601089cb'   # https://guidgenerator.com/online-guid-generator.aspx
    Info = 'Alpaca Driver for DWARF II Smart Telescope\nImplements ITelescope\nASCOM Initiative'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 3                            # ITelescopeV3

dwarf_dev = {}
# At app init not import :-)
def start_dwarf_device(logger: logger, name: str, ip_address: str, port: int, device_num: int): # type: ignore
    logger = logger
    global dwarf_dev
    dwarf_dev[device_num] = Dwarf(logger, ip_address, port, name, device_num, True)
    dwarf_dev[device_num].start_watch_thread()

def end_dwarf_device(device_num: int):
    dwarf_dev[device_num].end_watch_thread()


# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev))
class action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        if devnum not in dwarf_dev or not dwarf_dev[devnum].is_connected:
            err = DevNotConnectedException("device not connected.")
            resp.text = PropertyResponse(None, req, err).json
            return
        cur_dev = dwarf_dev[devnum]
        action_name = get_request_field('Action', req)      # Raises 400 bad request if missing
        parameters = get_request_field('Parameters', req)

        try:
            params = json.loads(parameters)
            print(f'Received request: Action {action_name} with params {params}')
            if action_name == "play_sound":
                cur_dev.play_sound(params['id'])
                resp.text = MethodResponse(req).json
            elif action_name == "method_sync":
                result = cur_dev.send_message_param_sync(params)
                resp.text = MethodResponse(req, value = result).json
            elif action_name == "method_async":
                result = cur_dev.send_message_param(params)
                resp.text = MethodResponse(req).json
            elif action_name == "start_stack":
                cur_dev.start_stack(params)
                resp.text = MethodResponse(req).json
            elif action_name == "start_mosaic":
                result = cur_dev.start_mosaic(params)
                resp.text = MethodResponse(req, value = result).json
            elif action_name == "goto_target":
                result = cur_dev.goto_target(params)
            elif action_name == "scope_stop_goto_auto_center":
                result = cur_dev.stop_goto_target()
            elif action_name == "set_below_horizon_dec_offset":
                result = cur_dev.set_below_horizon_dec_offset(params['offset'])
                resp.text = MethodResponse(req, value = result).json
            elif action_name == "start_spectra":
                result = cur_dev.start_spectra(params)
                resp.text = MethodResponse(req).json
            elif action_name == "get_schedule":
                result = cur_dev.get_schedule()
                resp.text = MethodResponse(req, value = result).json
            elif action_name == "create_schedule":
                result = cur_dev.create_schedule()
                resp.text = MethodResponse(req, value = result).json
            elif action_name == "add_schedule_item":
                result = cur_dev.add_schedule_item(params)
                resp.text = MethodResponse(req, value = result).json
            elif action_name == "start_scheduler":
                result = cur_dev.start_scheduler()
                resp.text = MethodResponse(req, value = result).json
            elif action_name == "stop_scheduler":
                result = cur_dev.stop_scheduler()
                resp.text = MethodResponse(req, value = result).json
            elif action_name == "action_start_up_sequence":
                cur_dev.action_start_up_sequence(params)
                resp.text = MethodResponse(req).json
            elif action_name == "get_last_image":
                redirect_url = cur_dev.get_last_image(params)
                resp.text = MethodResponse(req, value = redirect_url).json   
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DevDriverException(0x500, 'Telescope.Action failed', ex)).json


@before(PreProcessRequest(maxdev))
class commandblind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandbool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandstring:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class connected:
    def on_get(self, req: Request, resp: Response, devnum: int):
        is_conn = dwarf_dev[devnum].is_connected
        resp.text = PropertyResponse(is_conn, req).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)              # Raises 400 Bad Request if str to bool fails
        try:
            if conn:
                dwarf_dev[devnum].start_watch_thread()
            else:
                dwarf_dev[devnum].end_watch_thread()
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(0x500, 'Telescope.Connected failed', ex)).json

@before(PreProcessRequest(maxdev))
class description:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class driverinfo:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class interfaceversion:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class driverversion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class supportedactions:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev))
class alignmentmode:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = AlignmentModes.algGermanPolar # German Equatorial Mode
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Alignmentmode failed', ex)).json

@before(PreProcessRequest(maxdev))
class altitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Altitude failed', ex)).json

@before(PreProcessRequest(maxdev))
class aperturearea:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 1963.5    # r=25mm
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Aperturearea failed', ex)).json

@before(PreProcessRequest(maxdev))
class aperturediameter:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 50    # 50mm diameter
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Aperturediameter failed', ex)).json

@before(PreProcessRequest(maxdev))
class athome:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Athome failed', ex)).json

@before(PreProcessRequest(maxdev))
class atpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Atpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class azimuth:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Azimuth failed', ex)).json

@before(PreProcessRequest(maxdev))
class canfindhome:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canfindhome failed', ex)).json

@before(PreProcessRequest(maxdev))
class canpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class canpulseguide:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canpulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetdeclinationrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetdeclinationrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetguiderates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetguiderates failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetpierside:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetpierside failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetrightascensionrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetrightascensionrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansettracking:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansettracking failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslew:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslew failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewaltazasync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewaltazasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewasync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansync failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansyncaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansyncaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class canunpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canunpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class declination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].dec
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Declination failed', ex)).json

@before(PreProcessRequest(maxdev))
class declinationrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        declinationratestr = get_request_field('DeclinationRate', req)      # Raises 400 bad request if missing
        try:
            declinationrate = float(declinationratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'DeclinationRate " + declinationratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class doesrefraction:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        doesrefractionstr = get_request_field('DoesRefraction', req)      # Raises 400 bad request if missing
        doesrefraction = to_bool(doesrefractionstr)                       # Same here

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

@before(PreProcessRequest(maxdev))
class equatorialsystem:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = EquatorialCoordinateType.equTopocentric
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Equatorialsystem failed', ex)).json

@before(PreProcessRequest(maxdev))
class focallength:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 250
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Focallength failed', ex)).json

@before(PreProcessRequest(maxdev))
class guideratedeclination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        guideratedeclinationstr = get_request_field('GuideRateDeclination', req)      # Raises 400 bad request if missing
        try:
            guideratedeclination = float(guideratedeclinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'GuideRateDeclination " + guideratedeclinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json

@before(PreProcessRequest(maxdev))
class guideraterightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        guideraterightascensionstr = get_request_field('GuideRateRightAscension', req)      # Raises 400 bad request if missing
        try:
            guideraterightascension = float(guideraterightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'GuideRateRightAscension " + guideraterightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class ispulseguiding:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Ispulseguiding failed', ex)).json

@before(PreProcessRequest(maxdev))
class rightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].ra
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Rightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class rightascensionrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        rightascensionratestr = get_request_field('RightAscensionRate', req)      # Raises 400 bad request if missing
        try:
            rightascensionrate = float(rightascensionratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscensionRate " + rightascensionratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class sideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = PierSide.pierUnknown
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        sideofpierstr = get_request_field('SideOfPier', req)      # Raises 400 bad request if missing
        try:
            sideofpier = int(sideofpierstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SideOfPier " + sideofpierstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json

@before(PreProcessRequest(maxdev))
class siderealtime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = DriveRates.driveSidereal
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Siderealtime failed', ex)).json

@before(PreProcessRequest(maxdev))
class siteelevation:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].site_elevation
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        siteelevationstr = get_request_field('SiteElevation', req)      # Raises 400 bad request if missing
        try:
            siteelevation = float(siteelevationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteElevation " + siteelevationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            dwarf_dev[devnum].site_elevation = siteelevation
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json

@before(PreProcessRequest(maxdev))
class sitelatitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].site_latitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        sitelatitudestr = get_request_field('SiteLatitude', req)      # Raises 400 bad request if missing
        try:
            sitelatitude = float(sitelatitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteLatitude " + sitelatitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            dwarf_dev[devnum].site_latitude = sitelatitude
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json

@before(PreProcessRequest(maxdev))
class sitelongitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].site_longitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        sitelongitudestr = get_request_field('SiteLongitude', req)      # Raises 400 bad request if missing
        try:
            sitelongitude = float(sitelongitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteLongitude " + sitelongitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            dwarf_dev[devnum].site_longitude = sitelongitude
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewing:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].is_slewing
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Slewing failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewsettletime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        slewsettletimestr = get_request_field('SlewSettleTime', req)      # Raises 400 bad request if missing
        try:
            slewsettletime = float(slewsettletimestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SlewSettleTime " + slewsettletimestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json

@before(PreProcessRequest(maxdev))
class targetdeclination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].target_dec
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        targetdeclinationstr = get_request_field('TargetDeclination', req)      # Raises 400 bad request if missing
        try:
            targetdeclination = float(targetdeclinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TargetDeclination " + targetdeclinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            dwarf_dev[devnum].target_dec = targetdeclination
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json

@before(PreProcessRequest(maxdev))
class targetrightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].target_ra
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        targetrightascensionstr = get_request_field('TargetRightAscension', req)      # Raises 400 bad request if missing
        try:
            targetrightascension = float(targetrightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TargetRightAscension " + targetrightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            dwarf_dev[devnum].target_ra = targetrightascension
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class tracking:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Tracking failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        trackingstr = get_request_field('Tracking', req)      # Raises 400 bad request if missing
        tracking = to_bool(trackingstr)                       # Same here

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Tracking failed', ex)).json

@before(PreProcessRequest(maxdev))
class trackingrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        trackingratestr = get_request_field('TrackingRate', req)      # Raises 400 bad request if missing
        try:
            trackingrate = float(trackingratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TrackingRate " + trackingratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class trackingrates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = {0}
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Trackingrates failed', ex)).json

@before(PreProcessRequest(maxdev))
class utcdate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = dwarf_dev[devnum].utcdate
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        utcdatestr = get_request_field('UTCDate', req)      # Raises 400 bad request if missing
        try:
            utcdate = 0 #  {cvtfunc}(utcdatestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'UTCDate " + utcdatestr + " not a valid number.')).json
            return

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

@before(PreProcessRequest(maxdev))
class abortslew:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            dwarf_dev[devnum].stop_slew()
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Abortslew failed', ex)).json

@before(PreProcessRequest(maxdev))
class axisrates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = {0}
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Axisrates failed', ex)).json

@before(PreProcessRequest(maxdev))
class canmoveaxis:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canmoveaxis failed', ex)).json

@before(PreProcessRequest(maxdev))
class destinationsideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = PierSide.pierUnknown
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Destinationsideofpier failed', ex)).json

@before(PreProcessRequest(maxdev))
class findhome:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Findhome failed', ex)).json

@before(PreProcessRequest(maxdev))
class moveaxis:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        axisstr = get_request_field('Axis', req)      # Raises 400 bad request if missing
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis " + axisstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        ratestr = get_request_field('Rate', req)      # Raises 400 bad request if missing
        try:
            rate = float(ratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Rate " + ratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            dwarf_dev[devnum].move_scope(0, rate)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Moveaxis failed', ex)).json

@before(PreProcessRequest(maxdev))
class park:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Park failed', ex)).json

@before(PreProcessRequest(maxdev))
class pulseguide:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        directionstr = get_request_field('Direction', req)      # Raises 400 bad request if missing
        try:
            direction = int(directionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Direction " + directionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        durationstr = get_request_field('Duration', req)      # Raises 400 bad request if missing
        try:
            duration = float(durationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Duration " + durationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Pulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class setpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Setpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtoaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtoaltazasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtoaltazasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + rightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            dwarf_dev[devnum].goto_target({'ra':rightascension, 'dec':declination, 'target_name':"unknown"})
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtocoordinates failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtocoordinatesasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + rightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            dwarf_dev[devnum].goto_target({'ra':rightascension, 'dec':declination, 'target_name':"unknown"})
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtocoordinatesasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            dwarf_dev[devnum].goto_target({'ra':dwarf_dev[devnum].target_ra, 'dec':dwarf_dev[devnum].target_dec, 'target_name':"unknown"})
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtotarget failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtotargetasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            dwarf_dev[devnum].goto_target({'ra':dwarf_dev[devnum].target_ra, 'dec':dwarf_dev[devnum].target_dec, 'target_name':"unknown"})
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtotargetasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctoaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = float(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + rightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = float(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            dwarf_dev[devnum].sync_target([rightascension, declination])
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctocoordinates failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctotarget failed', ex)).json

@before(PreProcessRequest(maxdev))
class unpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not dwarf_dev[devnum].is_connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            # dwarf_dev[devnum].sync_target([dwarf_dev[devnum].target_ra, dwarf_dev[devnum].target_dec])
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Unpark failed', ex)).json

